name: Code Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

jobs:
  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci

    - name: Run code quality checks
      run: |
        cd frontend && npm run lint
        cd frontend && npm run type-check
        cd frontend && npm run format:check

    - name: Run tests
      run: |
        cd frontend && npm run test
        cd ../backend && npm run test || echo "No backend tests"

    - name: Security audit
      run: |
        npm audit --audit-level moderate
        cd frontend && npm audit --audit-level moderate
        cd ../backend && npm audit --audit-level moderate

    - name: Check for large files
      run: |
        # Check for files larger than 10MB
        find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | while read -r file; do
          echo "::warning::Large file detected: $file ($(du -h "$file" | cut -f1))"
        done

    - name: Check for secrets
      run: |
        # Check for potential secrets in code
        if command -v gitleaks >/dev/null 2>&1; then
          gitleaks detect --verbose --redact --config .gitleaks.toml || echo "Gitleaks not configured"
        else
          echo "Gitleaks not installed - consider installing for secret detection"
        fi

    - name: PR Size Check
      run: |
        # Check PR size
        CHANGED_FILES=$(git diff --name-only HEAD~1 | wc -l)
        CHANGED_LINES=$(git diff --stat HEAD~1 | tail -1 | awk '{print $4+$6}')

        if [ "$CHANGED_FILES" -gt 50 ]; then
          echo "::warning::Large PR: $CHANGED_FILES files changed. Consider splitting into smaller PRs."
        fi

        if [ "$CHANGED_LINES" -gt 1000 ]; then
          echo "::warning::Large PR: $CHANGED_LINES lines changed. Consider splitting into smaller PRs."
        fi

    - name: Code Review Comments
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          let comments = [];

          // Check for common issues
          const hasTests = files.some(file => file.filename.includes('.test.') || file.filename.includes('.spec.'));
          const hasFrontendChanges = files.some(file => file.filename.startsWith('frontend/'));
          const hasBackendChanges = files.some(file => file.filename.startsWith('backend/'));
          const hasMigrationChanges = files.some(file => file.filename.includes('migration'));

          if (hasFrontendChanges && !hasTests) {
            comments.push("⚠️ **Frontend changes detected but no tests found.** Please add tests for new features.");
          }

          if (hasMigrationChanges) {
            comments.push("🗄️ **Database migration detected.** Ensure migrations are backward compatible and tested.");
          }

          if (hasBackendChanges) {
            comments.push("🔒 **Backend changes detected.** Verify authentication and authorization are properly implemented.");
          }

          // Check for TODO comments
          const todoFiles = files.filter(file =>
            file.patch && (file.patch.includes('TODO') || file.patch.includes('FIXME') || file.patch.includes('HACK'))
          );

          if (todoFiles.length > 0) {
            comments.push(`📝 **TODO comments found in ${todoFiles.length} files.** Consider addressing or creating issues for these.`);
          }

          // Post comments if any issues found
          if (comments.length > 0) {
            const body = "## 🤖 Automated Code Review\n\n" + comments.join('\n\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Update PR Status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha
          });

          const allPassed = checks.check_runs.every(check => check.conclusion === 'success');

          if (allPassed) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## ✅ Code Review Passed\n\nAll automated checks have passed! 🎉\n\n- ✅ Code quality checks\n- ✅ Tests\n- ✅ Security audit\n- ✅ No large files\n\nReady for manual review."
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## ❌ Code Review Failed\n\nSome automated checks failed. Please review the check results above and fix any issues.\n\n🔧 **Common fixes:**\n- Run `npm run lint:fix` for linting issues\n- Run `npm run format` for formatting issues\n- Add tests for new features\n- Address security vulnerabilities"
            });
          }