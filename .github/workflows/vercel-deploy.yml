name: Deploy Frontend to Vercel (self-healing)

on:
  push:
    branches:
      - main
      - cursor/**
    paths:
      - 'frontend/**'
      - '.github/workflows/vercel-deploy.yml'
  workflow_dispatch:

concurrency:
  group: vercel-frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: frontend
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      # Optional, set to true in repo/organization secrets to enable verbose logs
      ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Preflight | Verify Vercel secrets present
        shell: bash
        run: |
          for v in VERCEL_TOKEN VERCEL_ORG_ID VERCEL_PROJECT_ID; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing required secret: $v" && exit 1
            fi
          done

      - name: Install dependencies (attempt 1)
        run: npm install --legacy-peer-deps

      - name: Build (attempt 1)
        run: npm run build:dev

      - name: Self-heal | Clean cache & reinstall (attempt 2)
        if: failure()
        run: |
          npm cache clean --force || true
          rm -rf node_modules package-lock.json || true
          npm install --legacy-peer-deps

      - name: Build (attempt 2)
        if: failure()
        run: npm run build:dev

      - name: Pull Vercel env (production)
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Vercel build (pre-render)
        run: vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy to Vercel (prebuilt)
        id: deploy
        shell: bash
        run: |
          url=$(vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN" | grep -o 'https://[^ ]*\.vercel\.app' | tail -n1)
          if [ -z "$url" ]; then echo "::error::Failed to extract deployment URL" && exit 1; fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed URL: $url"

      - name: Health check (retry)
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 5
          command: |
            curl -sSfL -o /dev/null -w "%{http_code}\n" "${{ steps.deploy.outputs.url }}" | grep -E "^(200|308)$"

      - name: Upload dist artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

      - name: Collect Vercel logs on failure
        if: failure()
        shell: bash
        run: |
          vercel inspect "${{ steps.deploy.outputs.url }}" --logs --token "$VERCEL_TOKEN" > ../vercel-logs.txt || true
          echo "Deployment URL: ${{ steps.deploy.outputs.url }}" > ../deploy-url.txt

      - name: Upload debug artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            vercel-logs.txt
            deploy-url.txt
            frontend/.vercel/project.json
            frontend/vercel.json
            frontend/package.json
            frontend/vite.config.ts
            frontend/tsconfig.json

      - name: Summary
        if: always()
        run: |
          echo "Deployment: ${{ steps.deploy.outputs.url }}"
          echo "Status: ${{ job.status }}"


